const axios = require('axios');

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = 'http://localhost:5000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testMovieNotFound() {
  console.log('\n=== –¢–µ—Å—Ç: –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω ===');
  try {
    const response = await axios.get(`${API_BASE_URL}/movies/nonexistentid`);
    console.log('‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 404, –Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status);
  } catch (error) {
    if (error.response && error.response.status === 404) {
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 404');
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.response.data.message);
      console.log('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.response.data.error);
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }
}

async function testStreamNotFound() {
  console.log('\n=== –¢–µ—Å—Ç: –°—Ç—Ä–∏–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∏–ª—å–º–∞ ===');
  try {
    const response = await axios.get(`${API_BASE_URL}/movies/nonexistentid/stream`);
    console.log('‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 404, –Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status);
  } catch (error) {
    if (error.response && error.response.status === 404) {
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 404 –¥–ª—è —Å—Ç—Ä–∏–º–∞');
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.response.data.message);
      console.log('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.response.data.error);
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }
}

async function testValidMovie() {
  console.log('\n=== –¢–µ—Å—Ç: –í–∞–ª–∏–¥–Ω—ã–π —Ñ–∏–ª—å–º ===');
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤
    const moviesResponse = await axios.get(`${API_BASE_URL}/movies`);
    if (moviesResponse.data && moviesResponse.data.length > 0) {
      const firstMovie = moviesResponse.data[0];
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º:', firstMovie.title);
      console.log('ID —Ñ–∏–ª—å–º–∞:', firstMovie._id);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ:', firstMovie.videos);
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–æ–≤:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
  
  await testMovieNotFound();
  await testStreamNotFound();
  await testValidMovie();
  
  console.log('\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { testMovieNotFound, testStreamNotFound, testValidMovie }; 